
import io
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import os
import random
from board_functions import *
from itertools import cycle
from flask import Flask, request, session, Response, render_template, url_for, flash, redirect, send_file
from forms import CoverCardsForm, GenerateCurrentForm, GenerateNewForm, UndoCoverForm, MakeDirtyForm, MakeCleanForm, SubmitWordsForm
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
from matplotlib.figure import Figure


# Word submission password is set in line 142

app = Flask(__name__)
app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 0

# Secret key is needed. Can be generated by importing secretes and running secrets.token_hex(16)
app.config["SECRET_KEY"] = "42"
current_folder = os.path.dirname(os.path.abspath(__file__))


@app.route("/")
@app.route("/home")
def home():
    img_path = os.path.join(current_folder, 'static/images/cage')
    imgs = [f for f in os.listdir(img_path) if not f.startswith('.')]
    img = random.choice(imgs)  # Display random choice of Nick Cage photo
    return render_template('home.html', cage=img)


# Page for generating / dispalying board pairs to Codemasters
@app.route('/codemasters', methods=["GET", "POST"])
def codemaster_boards():
    newform = GenerateNewForm()
    currentform = GenerateCurrentForm()
    coverform = CoverCardsForm()
    undoform = UndoCoverForm()
    dirtyform = MakeDirtyForm()
    cleanform = MakeCleanForm()

    if request.method == "POST":
        # 2nd Codemaster loads boards from seed given by 1st Codemaster
        if 'board_number' in request.form:
            params = get_params()
            try:
                params['seed'] = int(request.form["board_number"])
                write_params(params)
                generate_codemaster_board()
                return render_template('codemasterscreated.html', coverform=coverform, undoform=undoform)
            except ValueError:
                flash(
                    f'You entered {request.form["board_number"]}. Must enter a number or generate new board.', 'danger')
                return redirect(url_for('codemaster_boards'))

        # Last card placement is undone in case of mistakes
        elif 'submit_undo' in request.form:
            params = get_params()
            try:
                del params['card covers'][-1]
                write_params(params)
            except IndexError:
                flash('There\'s nothing to undo.', 'danger')
            return render_template('codemasterscreated.html', coverform=coverform, undoform=undoform)

        # Specified guessed word is covered by Codemaster
        elif 'row' in request.form:
            row = int(request.form['row'])
            col = int(request.form['col'])
            color = request.form['color']
            params = get_params()
            params['card covers'].append((row, col, color))
            write_params(params)
            return render_template('codemasterscreated.html',
                                   coverform=coverform, undoform=undoform, t=5)

        # Undercover Codenames words will be loaded
        elif 'submit_dirty' in request.form:
            params = get_params()
            params['adult words'] = True
            write_params(params)
            return redirect(url_for('codemaster_boards'))

        # Vanilla game Codenames words loaded
        elif 'submit_clean' in request.form:
            params = get_params()
            params['adult words'] = False
            write_params(params)
            return redirect(url_for('codemaster_boards'))

        # New game is started by first Codemaster. Previous data is cleared
        else:
            newseed = random.randrange(sys.maxsize)
            newseed = int(str(newseed)[0:3] + str(newseed)[-4:-1])
            params = get_params()
            params['seed'] = newseed
            params['card covers'] = []
            write_params(params)
            generate_codemaster_board()
            return render_template('codemasterscreated.html', coverform=coverform, undoform=undoform)

    params = get_params()
    adult = params['adult words']
    return render_template('codemasterscreate.html', newform=newform, currentform=currentform, dirtyform=dirtyform, cleanform=cleanform, adult=adult)


# Page for displaying the playing board to Agents
@app.route('/current_game')
def view_current():
    global genimgs
    img_path = os.path.join(current_folder, 'static/images/cage')
    imgs = [f for f in os.listdir(img_path) if not f.startswith('.')]
    try:
        img = next(genimgs)
    except NameError:
        genimgs = cycle((x for x in imgs))
        img = next(genimgs)
    newseed = random.randrange(sys.maxsize)
    random.seed(newseed)
    return render_template('guessers.html', nick=img)


@app.route('/word_board.png')
def make_word_board():
    fig = generate_word_board()
    output = io.BytesIO()
    FigureCanvas(fig).print_png(output)
    return Response(output.getvalue(), mimetype='image/png')


@app.route('/rules')
def rules():
    return render_template('rules.html')


# Page that allows users to add words to pool
@app.route('/contribute/', methods=["GET", "POST"])
def contribute_words():
    form = SubmitWordsForm()
    if request.method == "POST":
        password = request.form.get('password')
        if password == 'euler':  # Change to your choice of password
            flash('Thank you for submitting.', 'success')
            newline = request.form["word"]
            try:
                adult = request.form["adult"]
            except:
                adult = False
            word_updater(newline, adult)
            return redirect(url_for('contribute_words'))
        else:
            flash('Invalid password. Words not submitted.', 'danger')
    return render_template('contribute.html', form=form, sub=False)


# Prevent cacheing so that static codemaster board can be used
# Will be changed in the future
@app.after_request
def add_header(r):
    r.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
    r.headers["Pragma"] = "no-cache"
    r.headers["Expires"] = "0"
    r.headers['Cache-Control'] = 'public, max-age=0'
    return r
